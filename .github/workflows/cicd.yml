# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dvc
        pip install docker
        pip install "cython<3.0.0" wheel --break-system-packages
        pip install pyyaml==5.4.1 --no-build-isolation  --break-system-packages
        pip install docker-compose

    - name: Configure DVC and pull data
      env:
        GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
        GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
        GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA}}
      run: |
        dvc remote modify gdrive --local gdrive_client_id  $GDRIVE_CLIENT_ID
        dvc remote modify gdrive --local gdrive_client_secret $GDRIVE_CLIENT_SECRET 
        dvc remote modify gdrive gdrive_use_service_account true
        echo "$GDRIVE_CREDENTIALS_DATA" > gdrive-credentials.json
        echo "$GDRIVE_CREDENTIALS_DATA" | head -n 5  
        cat gdrive-credentials.json | jq . > /dev/null || echo "Invalid JSON!"
        dvc remote modify gdrive --local gdrive_service_account_json_file_path gdrive-credentials.json
        dvc pull

    - name: Set up API token
      env:
        DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
      run: |
        echo $DAGSHUB_USER_TOKEN > ~/.env
        echo "API token is set"

    - name: Start docker-compose
      run: |
        docker-compose up 

    - name: Clean up docker-compose
      run: |
        docker-compose down 

    # Data Splitting
    #- name: Run Data Splitting
    #  run: python src/data/data_split.py

    # Grid Search for Best Model Parameters
    #- name: Run Grid Search
    #  run: python src/models/model_grid_search.py

    # Model Training
    #- name: Train Model
    #  run: python src/models/model_train.py

    # Model Evaluation
    #- name: Evaluate Model
    #  run: python src/models/model_evaluate.py

