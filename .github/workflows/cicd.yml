# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dvc
        pip uninstall -y docker
        pip install "cython<3.0.0" wheel --break-system-packages
        pip install pyyaml==5.4.1 --no-build-isolation  --break-system-packages
    
    - name: Install Docker-Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version


    - name: Configure DVC and pull data
      env:
        GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
        GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
        GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA}}
      run: |
        dvc remote modify gdrive --local gdrive_client_id  $GDRIVE_CLIENT_ID
        dvc remote modify gdrive --local gdrive_client_secret $GDRIVE_CLIENT_SECRET 
        dvc remote modify gdrive gdrive_use_service_account true
        echo "$GDRIVE_CREDENTIALS_DATA" > gdrive-credentials.json
        cat gdrive-credentials.json | jq . > /dev/null || echo "Invalid JSON!"
        dvc remote modify gdrive --local gdrive_service_account_json_file_path gdrive-credentials.json
        dvc pull

    - name: Set up API token & secrets
      env:
        DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
        USERS_JSON: ${{ secrets.USERS }}
        JWT_SECRETS_JSON: ${{ secrets.JWT_SECRETS }}
      run: |
        echo "DAGSHUB_USER_TOKEN=${DAGSHUB_USER_TOKEN}" > .env
        echo "$USERS_JSON" | base64 --decode > config/users.json
        echo "$JWT_SECRETS_JSON" | base64 --decode > config/secrets.json

        echo "Secrets have been set up successfully."

    - name: Set up Docker
      run: |
        sudo systemctl start docker
        sudo systemctl status docker  
        echo "DOCKER_API_VERSION=1.41" >> $GITHUB_ENV

    - name: build docker containers
      env:
        DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
      run: |
        docker-compose build


    - name: Start docker-compose
      env:
        DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
      run: |
        docker-compose up -d

    - name: Wait for API to be ready
      run: |
        echo "Waiting for API to be ready..."
        sleep 15 
        curl --retry 10 --retry-delay 10 --retry-connrefused -s http://localhost:3000/healthz || exit 1
    
    - name: Run tests
      run: |
        pytest src/test_service.py -v

    - name: Clean up docker-compose
      run: |
        docker-compose down 

    # Data Splitting
    #- name: Run Data Splitting
    #  run: python src/data/data_split.py

    # Grid Search for Best Model Parameters
    #- name: Run Grid Search
    #  run: python src/models/model_grid_search.py

    # Model Training
    #- name: Train Model
    #  run: python src/models/model_train.py

    # Model Evaluation
    #- name: Evaluate Model
    #  run: python src/models/model_evaluate.py

